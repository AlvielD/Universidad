/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application;

import Graficos.TCanvas;
import java.util.Random;

/**
 *
 * @author aeste
 */
public class Generador extends java.awt.Frame {

    // Constantes
    private static final int MAX_PIEZAS = 15;
    private static final int ANCHO=1200;
    private static final int ALTO=800;
    
    /**
     * Creates new form GeneradorB
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        // Inicializamos el frame que contendrá nuestro canvas
        Generador frame = new Generador();
        frame.setSize(ANCHO, ALTO);
        frame.setTitle("Práctica 5 - Álvaro Esteban Muñoz");
        frame.setLocationRelativeTo(null);
        TCanvas canvas = new TCanvas(ANCHO, ALTO);   
        frame.add(canvas);
        frame.setVisible(true);
        
        Random r = new Random(System.nanoTime());
        Tanque t = new Tanque(canvas);                    // Recurso común a los hilos     
        Thread[] hilos = new Thread[MAX_PIEZAS];    // Array de hilos
        
        // CREACIÓN DE LOS HILOS
        for (int i = 0; i < MAX_PIEZAS; i++) {        
            if ((r.nextInt(10)+1)<=7 /* 70% de llantas */) {
                // CREAR HILO LLANTA
                hilos[i] = new Thread(new Llanta(t));
                hilos[i].start();
                canvas.apilaLlanta();
            } else {
                // CREAR HILO PARACHOQUES
                hilos[i] = new Parachoques(t);
                hilos[i].start();
                canvas.apilaPC();  
            }
            canvas.repaint();
            
            // ESPERAR ENTRE 1 A 2 SEGUNDOS
            try {
                Thread.sleep((r.nextInt(2)+1)*1000);
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
        
        // ESPERAMOS A QUE ACABEN TODOS LOS HILOS
        for (int j = 0; j < MAX_PIEZAS; j++) {
            try {
                hilos[j].join();
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(Generador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
        System.out.println("Todas las piezas se han cromado, finaliza el programa.");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

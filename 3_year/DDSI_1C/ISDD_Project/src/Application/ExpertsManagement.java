/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application;

import Persistence.Expert;
import Persistence.ExpertManager;
import Persistence.OracleConnection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Contains the view and the all the methods related to the Experts Management
 * submenu
 * @author Álvaro Esteban Muñoz
 */
public class ExpertsManagement extends javax.swing.JInternalFrame {

    private final OracleConnection c;   // Attribute with the connection to the DB
    private ExpertManager em = null;    // Reference to the controller
    protected final DefaultTableModel tmodel = new DefaultTableModel(); // Table model of the frame
    
    /**
     * Creates new form ExpertsByCountryMenu
     * @param c Oracle connection to the database
     */
    public ExpertsManagement(OracleConnection c) {
        initComponents();
        this.c = c;
        em = new ExpertManager(c);
        this.setTitle("Experts");
        
        // Initialize the table with the values of the DB
        setColumnNames();
        
        try{
            // Initialize comboBox items
            comboBoxItems();
            // Initialize the values of the rows
            viewExperts();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } finally {
            this.dispose();
        }
    }
    
    /**
     * Set the name for the columns of the frame's table.
     */
    private void setColumnNames() {
        ExpertsTable.setModel(tmodel);
        String[] columns = {"Code", "Name", "Country", "Sex", "Specialism"};
        tmodel.setColumnIdentifiers(columns);
                
        ExpertsTable.getTableHeader().setResizingAllowed(false);
        
        ExpertsTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        ExpertsTable.getColumnModel().getColumn(1).setPreferredWidth(140);
        ExpertsTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        ExpertsTable.getColumnModel().getColumn(3).setPreferredWidth(15);
        ExpertsTable.getColumnModel().getColumn(4).setPreferredWidth(122);
    }
    
    /**
     * Create an arrayList with the experts contained on the DB and pass it
     * to the fillExpertsTable method
     * @throws SQLException 
     */
    private void viewExperts() throws SQLException {
        ArrayList<Expert> listExp = em.expertList();
        fillExpertsTable(listExp);
    }
    
    /**
     * Fill the table of the window with the experts contained in the DB
     * @param listExp an arrayList with the experts contained in the DB
     */
    private void fillExpertsTable (ArrayList<Expert> listExp) {
        Object[] columna = new Object[5];
        int numRegistros = listExp.size();
        int numRows = tmodel.getRowCount();
        
        // Remove all the tuples from the table
        for (int i = numRows-1; i >= 0; i--) {
           tmodel.removeRow(i);
        }
        
        // Fil the table with the ArrayList passed "listExp"
        for (int i = 0; i < numRegistros; i++) {
            columna[0] = listExp.get(i).getCodEXPERT();
            columna[1] = listExp.get(i).getName();
            columna[2] = listExp.get(i).getCountry();
            columna[3] = listExp.get(i).getSex();
            columna[4] = listExp.get(i).getSpecialism();
            tmodel.addRow(columna);
        } 
    }
    
    /**
     * Initialize the items of the comboBox
     * @throws SQLException 
     */
    private void comboBoxItems() throws SQLException {
        ArrayList<String> listCountries = em.countriesList();
        
        // Remove all the items from the comboBox
        for (int i = 0; i < listCountries.size(); i++) {
            FilterByCountryBox.removeAllItems();
        }
        
        // Add the list of countries to the comboBox
        for (int i = 0; i < listCountries.size(); i++) {
            FilterByCountryBox.addItem(listCountries.get(i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ExpertsTable = new javax.swing.JTable();
        ListAllButton = new javax.swing.JButton();
        Label1 = new javax.swing.JLabel();
        FilterByCountryButton = new javax.swing.JButton();
        FilterByCountryBox = new javax.swing.JComboBox<>();
        Label2 = new javax.swing.JLabel();
        GenderTextField = new javax.swing.JTextField();
        CountButton = new javax.swing.JButton();
        CountResultLabel = new javax.swing.JLabel();

        jScrollPane1.setViewportView(ExpertsTable);

        ListAllButton.setText("List all");
        ListAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListAllButtonActionPerformed(evt);
            }
        });

        Label1.setText("Select country from this list");

        FilterByCountryButton.setText("Filter by country");
        FilterByCountryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterByCountryButtonActionPerformed(evt);
            }
        });

        FilterByCountryBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        Label2.setText("Sex");

        CountButton.setText("Count");
        CountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Label1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Label2)
                                .addGap(18, 18, 18)
                                .addComponent(GenderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CountButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CountResultLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FilterByCountryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FilterByCountryButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ListAllButton)))))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilterByCountryButton)
                    .addComponent(FilterByCountryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ListAllButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label2)
                    .addComponent(GenderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CountButton)
                    .addComponent(CountResultLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Performs the action of filtering by country
     * @param evt 
     */
    private void FilterByCountryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterByCountryButtonActionPerformed
        try {
            fillExpertsTable(em.expertListByCountry((String)FilterByCountryBox.getSelectedItem()));
        } catch (SQLException ex) {
            Logger.getLogger(ExpertsManagement.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.dispose();
        }
    }//GEN-LAST:event_FilterByCountryButtonActionPerformed

    /**
     * Performs the action of listing all the experts
     * @param evt 
     */
    private void ListAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListAllButtonActionPerformed
        em = new ExpertManager(c);
        this.setTitle("Experts");
        
        // Set the name of the columns of the table
        setColumnNames();
        
        try{
            // Initialize the comboBox items
            comboBoxItems();
            // Initialize the rows of the table
            viewExperts();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } finally {
            this.dispose();
        }
    }//GEN-LAST:event_ListAllButtonActionPerformed

    /**
     * Call the controller to count the selected experts and displays the result
     * on the application
     * @param evt 
     */
    private void CountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountButtonActionPerformed
        
        char option = Character.MIN_VALUE;  // Option to be passed to the counting method
        int num_gender = -1;    // Number of people of the selected gender
        String gender = null;   // The gender text that will be displayed on the application

        // Male case
        if(GenderTextField.getText().toUpperCase().equals(String.valueOf('M'))) {
            option = 'M';
            gender = "men";
        }
        
        // Female case
        if (GenderTextField.getText().toUpperCase().equals(String.valueOf('F'))) {
            option = 'F';
            gender = "women";
        }
        
        // Control of the result and exceptions
        if (option == Character.MIN_VALUE)
            JOptionPane.showMessageDialog(this, "Invalid character. Valid characters are M or F.");
        else {
            num_gender = em.sExpert(option);    // Call the expertManager controller to count the selected experts
            CountResultLabel.setText("There are " + (String.valueOf(num_gender)) + " " + gender + " in the database");
        }
    }//GEN-LAST:event_CountButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CountButton;
    private javax.swing.JLabel CountResultLabel;
    private javax.swing.JTable ExpertsTable;
    private javax.swing.JComboBox<String> FilterByCountryBox;
    private javax.swing.JButton FilterByCountryButton;
    private javax.swing.JTextField GenderTextField;
    private javax.swing.JLabel Label1;
    private javax.swing.JLabel Label2;
    private javax.swing.JButton ListAllButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
